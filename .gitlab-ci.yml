variables:
  DOCKERFILE: "Dockerfile.build"
 
stages:
  - build
  - deploy
    
build:
  stage: build
  when: manual
  script:
    - echo "generating $DOCKERFILE"
    - echo "FROM node:19.5.0-alpine AS build" >> $DOCKERFILE
    - echo "WORKDIR /app" >> $DOCKERFILE
    - echo 'COPY ["package.json", "package-lock.json", "./"]' >> $DOCKERFILE
    - echo "RUN npm install" >> $DOCKERFILE
    - echo "COPY . ." >> $DOCKERFILE
    - echo "RUN ls -la" >> $DOCKERFILE
    - echo "EXPOSE 8880" >> $DOCKERFILE
  #  - echo 'CMD ["node", "service.js"]' >> $DOCKERFILE
    - echo "CMD npm run start" >> $DOCKERFILE


    - export VERSION=$(npm version | head -n 1 | sed 's/[^.0-9]//g')
    - DOCKER_BUILDKIT=1 docker build -f $CI_PROJECT_DIR/$DOCKERFILE -t registry.sitronics-it.com/antidrone/$CI_PROJECT_NAME:$VERSION .
    - docker push registry.sitronics-it.com/antidrone/$CI_PROJECT_NAME:$VERSION
    - echo $VERSION > version.txt

    # version incrementation
    - git checkout $CI_COMMIT_REF_NAME
    - git pull https://group-token-antidrone:${CI_GROUP_TOKEN}@${CI_SERVER_HOST}/antidrone/$CI_PROJECT_NAME.git $CI_COMMIT_REF_NAME
    - npm version patch --git-tag-version false
    - export VERSION=$(npm version | head -n 1 | sed 's/[^.0-9]//g')
    - git tag -a "v$VERSION-alfa" -m "Antidrone web [deploy], new version is v$VERSION-alfa"
    - git push -v --progress https://group-token-antidrone:${CI_GROUP_TOKEN}@${CI_SERVER_HOST}/antidrone/$CI_PROJECT_NAME.git "v$VERSION-alfa"
    - git add -A -- ':!version.txt'
    - git commit -a -m "Increment version to $VERSION"
    - git push -v --progress https://group-token-antidrone:${CI_GROUP_TOKEN}@${CI_SERVER_HOST}/antidrone/$CI_PROJECT_NAME.git $CI_COMMIT_REF_NAME


  artifacts:
    paths:
      - version.txt
      - $DOCKERFILE
    expire_in: 1 hour

.base deploy:
  stage: deploy
  variables:
    KUBECONFIG: "/home/gitlab-runner/.kube/kubeconfig.yaml"
    GIT_STRATEGY: clone
    DEPLOY_TIMEOUT: 600s
  before_script:
    -  |
       echo "Проверяем наличие namespace ${RELEASE_NAMESPACE}";
       if [ $(kubectl get ns --kubeconfig ${KUBECONFIG} | awk '{print $1}' | egrep -cix ${RELEASE_NAMESPACE}) -ne 0 ];
        then
          echo "Namespace ${RELEASE_NAMESPACE} существует";
        else
          echo "Namespace ${RELEASE_NAMESPACE} отсутствует";
          exit 1;
        fi;
  script:
   - echo "Деплоим сервис $CI_PROJECT_NAME в namespace ${RELEASE_NAMESPACE}"
   - cat version.txt
   - export VERSION=$(cat version.txt)
   - git clone -v --progress https://group-token-antidrone:${CI_GROUP_TOKEN}@${CI_SERVER_HOST}/antidrone/infrastructure/helm.git
   - cd $CI_PROJECT_DIR/helm/services
   - helm -n ${RELEASE_NAMESPACE} upgrade -i $CI_PROJECT_NAME  $CI_PROJECT_NAME -f $CI_PROJECT_NAME/$VALUES_FILE --set image.tag=$VERSION --kubeconfig ${KUBECONFIG} --timeout ${DEPLOY_TIMEOUT} --wait
   - echo "Версии микросервисов в ${RELEASE_NAMESPACE}"
   - kubectl -n ${RELEASE_NAMESPACE} get pods --kubeconfig ${KUBECONFIG} --field-selector=status.phase!=Terminating -o jsonpath="{.items[*].spec.containers[*].image}" | tr -s "[[:space:]]" "\n" | sort | uniq

deploy:antidrone:
  extends: [".base deploy"]
  variables:
    VALUES_FILE: values.yaml
    RELEASE_NAMESPACE: antidrone
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual

deploy:prod:
  extends: [".base deploy"]
  variables:
    VALUES_FILE: prod-values.yaml
    RELEASE_NAMESPACE: prod
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual

